{"version":3,"sources":["logo.png","App.js","index.js"],"names":["validateEmail","email","test","String","toLowerCase","App","useState","user","setUser","iserror","setIserror","errorMessages","setErrorMessages","useEffect","axios","get","then","res","users","data","className","style","background","src","logo","height","width","alt","title","columns","field","options","headerStyle","borderBottomColor","borderBottomWidth","fontFamily","textAlign","actionsColumnIndex","editable","onRowUpdate","newData","oldData","Promise","resolve","errorList","name","push","username","phone","website","length","put","id","response","updateUser","tableData","catch","error","handleRowUpdate","onRowAdd","post","newUserdata","handleRowAdd","onRowDelete","delete","dataDelete","index","splice","handleRowDelete","Alert","severity","AlertTitle","map","msg","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3fba029.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.031dc713.png\";","import React, { useEffect, useState } from 'react';\nimport MaterialTable from 'material-table';\nimport './App.css';\nimport axios from 'axios';\nimport logo from './logo.png'\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n// regex for email validation\nconst validateEmail = (email) => {\n  const re = /^[a-zA-Z0-9]+@+[a-zA-Z0-9]+.+[A-z]/\n  return re.test(String(email).toLowerCase());\n}\n\n\nconst App = () => {\n\n  const [user, setUser] = useState([]);\n  const [iserror, setIserror] = useState(false);\n  const [errorMessages, setErrorMessages] = useState([]);\n\n  let columns = [\n    { title: 'NAME', field: 'name' },\n    { title: 'USERNAME', field: 'username' },\n    { title: 'EMAIL', field: 'email' },\n    { title: 'PHONE', field: 'phone' },\n    { title: 'WEBSITE', field: 'website' },\n  ]\n \n\n  useEffect(() => {\n    axios.get(`https://jsonplaceholder.typicode.com/users`)\n      .then(res => {\n        const users = res.data;\n        setUser(users);\n      })\n  }, [])\n\n\n\n  //function for updating the existing row details\n  const handleRowUpdate = (newData, oldData, resolve) => {\n    //validating the data inputs\n    let errorList = []\n    if (newData.name === \"\") {\n      errorList.push(\"Try Again, You didn't enter the name field\")\n    }\n    if (newData.username === \"\") {\n      errorList.push(\"Try Again, You didn't enter the Username field\")\n    }\n    if (newData.email === \"\" || validateEmail(newData.email) === false) {\n      errorList.push(\"Oops!!! Please enter a valid email\")\n    }\n    if (newData.phone === \"\") {\n      errorList.push(\"Try Again, Phone number field can't be blank\")\n    }\n    if (newData.website === \"\") {\n      errorList.push(\"Try Again, Enter website url before submitting\")\n    }\n\n    if (errorList.length < 1) {\n      axios.put(`https://jsonplaceholder.typicode.com/users/${newData.id}`, newData)\n        .then(response => {\n          const updateUser = [...user];\n          const index = oldData.tableData.id;\n          updateUser[index] = newData;\n          setUser([...updateUser]);\n          resolve()\n          setIserror(false)\n          setErrorMessages([])\n        })\n        .catch(error => {\n          setErrorMessages([\"Update failed! Server error\"])\n          setIserror(true)\n          resolve()\n\n        })\n    } else {\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n\n    }\n  }\n\n\n  //function for deleting a row\n  const handleRowDelete = (oldData, resolve) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/users/${oldData.id}`)\n      .then(response => {\n        const dataDelete = [...user];\n        const index = oldData.tableData.id;\n        dataDelete.splice(index, 1);\n        setUser([...dataDelete]);\n        resolve()\n      })\n      .catch(error => {\n        setErrorMessages([\"Delete failed! Server error\"])\n        setIserror(true)\n        resolve()\n      })\n  }\n\n\n  //function for adding a new row to the table\n  const handleRowAdd = (newData, resolve) => {\n    //validating the data inputs\n    let errorList = []\n    if (newData.name === \"\") {\n      errorList.push(\"Try Again, You didn't enter the name field\")\n    }\n    if (newData.username === \"\") {\n      errorList.push(\"Try Again, You didn't enter the Username field\")\n    }\n    if (newData.email === \"\" || validateEmail(newData.email) === false) {\n      errorList.push(\"Oops!!! Please enter a valid email\")\n    }\n    if (newData.phone === \"\") {\n      errorList.push(\"Try Again, Phone number field can't be blank\")\n    }\n    if (newData.website === \"\") {\n      errorList.push(\"Try Again, Enter website url before submitting\")\n    }\n\n    if (errorList.length < 1) {\n      axios.post(`https://jsonplaceholder.typicode.com/users`, newData)\n        .then(response => {\n          let newUserdata = [...user];\n          newUserdata.push(newData);\n          setUser(newUserdata);\n          resolve()\n          setErrorMessages([])\n          setIserror(false)\n        })\n        .catch(error => {\n          setErrorMessages([\"Cannot add data. Server error!\"])\n          setIserror(true)\n          resolve()\n        })\n    } else {\n      setErrorMessages(errorList)\n      setIserror(true)\n      resolve()\n    }\n  }\n\n\n  return (\n    <div className=\"app\">\n      <div style={{background:'rgb(35,31,31)'}}>\n      <img src={logo} height='60px' width='150px' alt='/logo'/>\n      </div>\n      <h1>Task 1 - Material Table CRUD</h1> <br /><br />\n\n      <MaterialTable\n        title=\"User Details\"\n        columns={columns}\n        data={user}\n        options={{\n          headerStyle: { borderBottomColor: 'rgb(35,31,31)', borderBottomWidth: '3px', fontFamily: 'verdana',textAlign:'center' },\n          actionsColumnIndex: -1\n        }}\n        editable={{\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve) => {\n              handleRowUpdate(newData, oldData, resolve);\n\n            }),\n          onRowAdd: (newData) =>\n            new Promise((resolve) => {\n              handleRowAdd(newData, resolve)\n            }),\n          onRowDelete: (oldData) =>\n            new Promise((resolve) => {\n              handleRowDelete(oldData, resolve)\n            }),\n        }}\n      />\n\n      <div>\n        {iserror &&\n          <Alert severity=\"error\">\n            <AlertTitle>ERROR</AlertTitle>\n            {errorMessages.map((msg, i) => {\n              return <div key={i}>{msg}</div>\n            })}\n          </Alert>\n        }\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}